{"version":3,"file":"static/js/90.6333767c.chunk.js","mappings":"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","sources":["View/Todo/Todo.js"],"sourcesContent":["\r\n\r\n\r\n\r\nimport React, { useEffect } from \"react\";\r\n\r\n\r\nimport './Todo.css'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport Tooltip from '@mui/material/Tooltip';\r\n\r\nimport TextField from '@mui/material/TextField';\r\n\r\nimport Paper from '@mui/material/Paper';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Typography from '@mui/material/Typography';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\n\r\nimport InputBase from '@mui/material/InputBase'\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport { useDispatch } from 'react-redux';\r\nimport { logout, updateListTodo } from '../../Redducer/userReducer';\r\nimport { useState } from \"react\";\r\n\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport { updateUser } from \"../Login/Login\";\r\n\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTodoList , selectUser } from \"../../Redducer/userReducer\";\r\nimport {useNavigate} from 'react-router-dom';\r\nimport Loading from \"../Loading\";\r\n\r\n\r\n\r\n\r\n\r\nexport default function Todo(props) {\r\n    const dispatch = useDispatch()\r\n\r\n    const [loading,setLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n    \r\n    const [inputTodo, setInputTodo] = useState(\"\")\r\n    const [preTodo, setPreTodo] = useState({\r\n        Todo: \"\",\r\n        edit: false,\r\n        checked: false\r\n    })\r\n    const [editTodo,setEditTodo] = useState(\"\")\r\n    const [deleteAllChecked, setdeleteAllChecked] = useState(false)\r\n    const listTodo = useSelector(selectTodoList);\r\n    const user = useSelector(selectUser)\r\n    const userData = useSelector((state) => state.user.userData)\r\n    const [checkLogin,setChecklogin] = useState(true)    \r\n\r\n    useEffect(()=>{\r\n\r\n        setTimeout(()=>{\r\n           setLoading(false)\r\n        },1500)\r\n        const login = localStorage.getItem(\"login\");\r\n\r\n        if(!login && checkLogin){\r\n           navigate('/')\r\n          \r\n        }\r\n        setChecklogin(false)\r\n        localStorage.removeItem('login')\r\n\r\n    },)\r\n    \r\n   \r\n    \r\n\r\n    \r\n\r\n\r\n\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\r\n    return loading? (<Loading/>) : (\r\n        <div className=\"Todo-bg\">\r\n          \r\n                <div className=\"todolist\">\r\n                <Typography sx={{ m: 0, textAlign: 'left', paddingLeft: '8%', paddingBottom: '20px' }} variant=\"h6\" gutterBottom component=\"div\">\r\n                    Todolist\r\n                </Typography>\r\n                <Typography sx={{ m: 0, textAlign: 'left', paddingLeft: '8%', paddingBottom: '5px' }} variant=\"body1\" gutterBottom component=\"div\">\r\n                    Xin chào : {user}\r\n                </Typography>\r\n                <Typography sx={{ m: 0, textAlign: 'left', paddingLeft: '8%', paddingBottom: '20px' }} variant=\"body1\" gutterBottom component=\"div\">\r\n                    Hãy viết ra những công việc bạn cần làm ~\r\n                </Typography>\r\n                <Paper variant=\"outlined\" square sx={{ p: '2px 4px', margin: 'auto', display: 'flex', alignItems: 'center', width: \"83%\", }}>\r\n                    <TextField\r\n                        label=\"\"\r\n                        value={inputTodo}\r\n                        onChange={(e) => {\r\n                            setInputTodo(e.target.value)\r\n                        }}\r\n                        id=\"filled-start-adornment\"\r\n                        sx={{ m: 1, width: '80ch' }}\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">Thêm mới :</InputAdornment>,\r\n                        }}\r\n                        variant=\"standard\"\r\n\r\n                    />\r\n\r\n\r\n                    <Tooltip title=\"Lưu\">\r\n                    <IconButton onClick={() => {\r\n                        if (inputTodo !== \"\") {\r\n\r\n                            dispatch(updateListTodo({\r\n                                \r\n                                listTodo:[...listTodo, {\r\n                                    Todo: inputTodo,\r\n                                    edit: false,\r\n                                    checked:false\r\n                                }]\r\n                            }))\r\n                            \r\n\r\n                            \r\n\r\n\r\n                            setInputTodo(\"\")\r\n\r\n                        }\r\n                    }} >\r\n                        <CheckIcon />\r\n                    </IconButton>\r\n                    </Tooltip>\r\n\r\n                </Paper>\r\n\r\n\r\n                {\r\n                    listTodo.map((td, index) => {\r\n                       \r\n                        if (!td.edit) {\r\n                            return (<Paper variant=\"outlined\" square sx={{ p: '2px 4px', margin: 'auto', marginTop: '10px', display: 'flex', alignItems: 'center', width: \"83%\" }}\r\n                            >\r\n                                <Checkbox onClick={()=>{\r\n                                     let hh = [...listTodo]\r\n                                     console.log(listTodo)\r\n                                     let b= hh[index].checked\r\n                                     \r\n                                     hh[index] = {\r\n                                         ...hh[index],\r\n                                         checked: !b\r\n                                     }\r\n                                    \r\n                                     dispatch(updateListTodo({\r\n                                         listTodo:[...hh]\r\n                                     }))\r\n                                }} {...label} checked = {td.checked} />\r\n                                <InputBase\r\n                                    value={td.Todo}\r\n                                    sx={{ ml: 1, flex: 1 }}\r\n                                    autoFocus={false}\r\n                                    inputProps={{ 'aria-label': 'search google maps' }}\r\n\r\n                                />\r\n\r\n                                <Tooltip title=\"Chỉnh sửa\">\r\n                                    <IconButton\r\n                                        onClick={() => {\r\n\r\n                                            let hh = [...listTodo]\r\n                                            hh.map((h) => {\r\n                                                if (h.edit) {\r\n                                                    h.edit = false\r\n                                                    h.Todo = preTodo.Todo\r\n                                                }\r\n                                            })\r\n                                            setPreTodo({\r\n                                                Todo: hh[index].Todo,\r\n                                                edit: false\r\n                                            })\r\n                                            setEditTodo(hh[index].Todo)\r\n                                            hh[index] = {\r\n                                                ...hh[index],\r\n                                                edit:true\r\n                                            };\r\n                                            console.log(hh)\r\n\r\n\r\n                                            dispatch(updateListTodo({\r\n                                                listTodo:[...hh]\r\n                                            }))\r\n\r\n                                        }}>\r\n                                        <EditIcon />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={td.checked && \"Xóa\" || \"Hãy lựa chọn công việc để xóa\"}>\r\n                                    <IconButton  onClick={() => {\r\n\r\n                                       if(td.checked){\r\n                                        let haha = [...listTodo]\r\n                                        for( let i =  0 ; i< haha.length ; i++){\r\n                                            if(haha[i].edit){\r\n                                                haha[i].edit = false;\r\n                                            }\r\n                                            \r\n                                        }\r\n                                        haha.splice(index, 1)\r\n\r\n                                        dispatch(updateListTodo({\r\n                                            listTodo:[...haha]\r\n                                        }))\r\n                                       }\r\n                                    }}>\r\n                                        <DeleteIcon color={!td.checked && \"disabled\" || \"error\"}  />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n\r\n\r\n                            </Paper>)\r\n                        } else {\r\n                            return (\r\n                                <Paper variant=\"outlined\" square sx={{ p: '2px 4px', margin: 'auto', marginTop: '10px', display: 'flex', alignItems: 'center', width: 700 }}\r\n                                >\r\n\r\n                                    <TextField\r\n\r\n                                        value={editTodo}\r\n                                        sx={{ ml: 1, flex: 1 }}\r\n                                        autoFocus={td.edit}\r\n                                        onChange={\r\n                                            (e) => {\r\n\r\n                                               setEditTodo(e.target.value)\r\n\r\n                                            }\r\n                                        }\r\n\r\n                                        inputProps={{ 'aria-label': 'search google maps' }}\r\n                                        variant=\"standard\"\r\n\r\n                                    />\r\n\r\n                                    <Tooltip title=\"Lưu\">\r\n                                        <IconButton\r\n                                            onClick={() => {\r\n                                                let hh = [...listTodo]\r\n                                                hh[index] = {\r\n                                                    ...hh[index],\r\n                                                    edit:false,\r\n                                                    Todo: editTodo\r\n                                                };\r\n                                               \r\n                                                dispatch(updateListTodo({\r\n                                                    listTodo:[...hh]\r\n                                                }))\r\n                                            }}>\r\n                                            <CheckIcon />\r\n                                        </IconButton>\r\n\r\n                                    </Tooltip>\r\n                                    <Tooltip title=\"Hủy\">\r\n\r\n                                        <IconButton onClick={() => {\r\n\r\n                                            let haha = [...listTodo]\r\n                                            haha[index] ={\r\n                                                ...haha[index],\r\n                                                Todo:preTodo.Todo,\r\n                                                edit:false\r\n                                            }\r\n                                           \r\n\r\n                                            dispatch(updateListTodo({\r\n                                                listTodo:[...haha]\r\n                                            }))\r\n                                        }}>\r\n                                            <CancelIcon />\r\n                                        </IconButton>\r\n\r\n                                    </Tooltip>\r\n\r\n                                </Paper>)\r\n                        }\r\n                    })\r\n                }\r\n                <div style={{ marginTop: \"20px\",marginRight:\"50px\", display:\"flex\", justifyContent:\"right\" }}>\r\n\r\n                 <Tooltip title=\"Xóa các lựa chọn\">\r\n                       \r\n                           <Typography style={{cursor:\"pointer\",fontWeight:\"600\"}} onClick={()=>{\r\n                           \r\n                           let hh = [...listTodo];\r\n                           for(let i = 0;i<hh.length;i++){\r\n                               if(hh[i].checked){\r\n                                   hh.splice(i,1) \r\n                                   i--;                                 \r\n                               }\r\n                           }\r\n                           dispatch(updateListTodo({\r\n                               listTodo:[...hh]\r\n                           }))\r\n                        }} color={!deleteAllChecked&& \"disabled\" || \"error\"}>Xóa các lựa chọn</Typography>\r\n                       \r\n                   </Tooltip>\r\n\r\n                </div>\r\n                <div style={{ marginTop: \"20px\" }}>\r\n                    \r\n                    \r\n                    <Tooltip title=\"Đăng xuất và lưu các thay đổi\">\r\n                        <IconButton onClick={async () => {\r\n                            let newUserx = {\r\n                                ...userData\r\n                            }\r\n                            console.log(newUserx)\r\n                            newUserx.todo = [...listTodo]\r\n\r\n                            await updateUser(newUserx)\r\n                            localStorage.removeItem('login')\r\n                            dispatch(logout())\r\n                            navigate('/')\r\n                           \r\n                        }}>\r\n                            <LogoutIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    \r\n                </div>\r\n            </div>\r\n           \r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n"],"names":["Todo","props","dispatch","useDispatch","useState","loading","setLoading","navigate","useNavigate","inputTodo","setInputTodo","edit","checked","preTodo","setPreTodo","editTodo","setEditTodo","deleteAllChecked","listTodo","useSelector","selectTodoList","user","selectUser","userData","state","checkLogin","setChecklogin","useEffect","setTimeout","localStorage","getItem","removeItem","label","inputProps","Loading","className","Typography","sx","m","textAlign","paddingLeft","paddingBottom","variant","gutterBottom","component","Paper","square","p","margin","display","alignItems","width","TextField","value","onChange","e","target","id","InputProps","startAdornment","InputAdornment","position","Tooltip","title","IconButton","onClick","updateListTodo","Check","map","td","index","marginTop","ml","flex","autoFocus","hh","haha","Cancel","Checkbox","console","log","b","InputBase","h","Edit","i","length","splice","Delete","color","style","marginRight","justifyContent","cursor","fontWeight","newUserx","todo","updateUser","logout","Logout"],"sourceRoot":""}