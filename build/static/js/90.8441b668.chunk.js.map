{"version":3,"file":"static/js/90.8441b668.chunk.js","mappings":"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","sources":["View/Todo/Todo.js"],"sourcesContent":["\r\n\r\n\r\n\r\nimport React, { useEffect } from \"react\";\r\n\r\n\r\nimport './Todo.css'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport Tooltip from '@mui/material/Tooltip';\r\n\r\nimport TextField from '@mui/material/TextField';\r\n\r\nimport Paper from '@mui/material/Paper';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Typography from '@mui/material/Typography';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\n\r\nimport InputBase from '@mui/material/InputBase'\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport { useDispatch } from 'react-redux';\r\nimport { logout, updateListTodo } from '../../Redducer/userReducer';\r\nimport { useState } from \"react\";\r\n\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport { updateUser } from \"../Login/Login\";\r\n\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTodoList , selectUser } from \"../../Redducer/userReducer\";\r\nimport {useNavigate} from 'react-router-dom';\r\nimport Loading from \"../Loading\";\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n  });\r\n\r\n\r\n\r\n\r\nexport default function Todo(props) {\r\n    const dispatch = useDispatch()\r\n\r\n    const [loading,setLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n    const [showAlert,setShowAlert] = useState(false)\r\n    const [inputTodo, setInputTodo] = useState(\"\")\r\n    const [preTodo, setPreTodo] = useState({\r\n        Todo: \"\",\r\n        edit: false,\r\n        checked: false\r\n    })\r\n    const [editTodo,setEditTodo] = useState(\"\")\r\n    const [deleteAllChecked, setdeleteAllChecked] = useState(false)\r\n    const listTodo = useSelector(selectTodoList);\r\n    const user = useSelector(selectUser)\r\n    const userData = useSelector((state) => state.user.userData)\r\n    const [checkLogin,setChecklogin] = useState(true)    \r\n\r\n    useEffect(()=>{\r\n\r\n        setTimeout(()=>{\r\n           setLoading(false)\r\n        },1500)\r\n        const login = localStorage.getItem(\"login\");\r\n\r\n        if(!login && checkLogin){\r\n           navigate('/')\r\n          \r\n        }\r\n        setChecklogin(false)\r\n        localStorage.removeItem('login')\r\n\r\n    },)\r\n    \r\n   useEffect( ()=>{\r\n     for(let i = 0 ; i< listTodo.length ; i++){\r\n         if(listTodo[i].checked){\r\n            setdeleteAllChecked(true)\r\n            break\r\n         }else{\r\n             if(i == listTodo.length -1){\r\n                setdeleteAllChecked(false)\r\n             }\r\n         }\r\n     }\r\n     \r\n   },[listTodo])\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\r\n    return loading? (<Loading/>) : (\r\n        <div className=\"Todo-bg\">\r\n          \r\n                <div className=\"todolist\">\r\n                <Typography sx={{ m: 0, textAlign: 'left', paddingLeft: '8%', paddingBottom: '0px' }} variant=\"h6\" gutterBottom component=\"div\">\r\n                    YOUR TO DO LIST\r\n                </Typography>\r\n                <Typography sx={{ m: 0, textAlign: 'left', paddingLeft: '8%', paddingBottom: '5px' }} variant=\"body1\" gutterBottom component=\"div\">\r\n                    Xin chào : {user}\r\n                </Typography>\r\n                <Typography sx={{ m: 0, textAlign: 'left', width:'83%', paddingLeft: '8%', paddingBottom: '30px' }} variant=\"body1\" gutterBottom component=\"div\">\r\n                    Hãy viết ra những công việc bạn cần làm ~\r\n                </Typography>\r\n                <Paper variant=\"outlined\" square sx={{ p: '0px 4px', margin: 'auto', display: 'flex', alignItems: 'center', width: \"83%\", }}>\r\n                    <TextField\r\n                        label=\"\"\r\n                        value={inputTodo}\r\n                        onChange={(e) => {\r\n                            setInputTodo(e.target.value)\r\n                        }}\r\n                        id=\"filled-start-adornment\"\r\n                        sx={{ m: 1, width: '80ch' }}\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">Thêm mới :</InputAdornment>,\r\n                        }}\r\n                        variant=\"standard\"\r\n\r\n                    />\r\n\r\n\r\n                    <Tooltip title=\"Lưu\">\r\n                    <IconButton onClick={() => {\r\n                        if (inputTodo !== \"\") {\r\n\r\n                            dispatch(updateListTodo({\r\n                                \r\n                                listTodo:[...listTodo, {\r\n                                    Todo: inputTodo,\r\n                                    edit: false,\r\n                                    checked:false\r\n                                }]\r\n                            }))\r\n                            \r\n\r\n                            \r\n\r\n\r\n                            setInputTodo(\"\")\r\n\r\n                        }\r\n                    }} >\r\n                        <CheckIcon />\r\n                    </IconButton>\r\n                    </Tooltip>\r\n\r\n                </Paper>\r\n\r\n\r\n                {\r\n                    listTodo.map((td, index) => {\r\n                       \r\n                        if (!td.edit) {\r\n                            return (<Paper variant=\"outlined\" square sx={{ p: '2px 4px', margin: 'auto', marginTop: '10px', display: 'flex', alignItems: 'center', width: \"83%\" }}\r\n                            >\r\n                                <Checkbox onClick={()=>{\r\n                                     let hh = [...listTodo]\r\n                                     console.log(listTodo)\r\n                                     let b= hh[index].checked\r\n                                     \r\n                                     hh[index] = {\r\n                                         ...hh[index],\r\n                                         checked: !b\r\n                                     }\r\n                                    \r\n                                     dispatch(updateListTodo({\r\n                                         listTodo:[...hh]\r\n                                     }))\r\n                                }} {...label} checked = {td.checked} />\r\n                                <InputBase\r\n                                    value={td.Todo}\r\n                                    sx={{ ml: 1, flex: 1 }}\r\n                                    autoFocus={false}\r\n                                    inputProps={{ 'aria-label': 'search google maps' }}\r\n\r\n                                />\r\n\r\n                                <Tooltip title=\"Chỉnh sửa\">\r\n                                    <IconButton\r\n                                        onClick={() => {\r\n\r\n                                            let hh = [...listTodo]\r\n                                            for(let i=0;i<hh.length;i++){\r\n                                                if (hh[i].edit) {\r\n                                                    hh[i] = {\r\n                                                        ...hh[i],\r\n                                                        edit:false,\r\n                                                        Todo:preTodo.Todo\r\n                                                    }\r\n                                                    \r\n                                                }\r\n                                            }\r\n                                            setPreTodo({\r\n                                                Todo: hh[index].Todo,\r\n                                                edit: false\r\n                                            })\r\n                                            setEditTodo(hh[index].Todo)\r\n                                            hh[index] = {\r\n                                                ...hh[index],\r\n                                                edit:true\r\n                                            };\r\n                                            console.log(hh)\r\n\r\n\r\n                                            dispatch(updateListTodo({\r\n                                                listTodo:[...hh]\r\n                                            }))\r\n\r\n                                        }}>\r\n                                        <EditIcon />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={td.checked && \"Xóa\" || \"Hãy lựa chọn công việc để xóa\"}>\r\n                                    <IconButton  onClick={() => {\r\n\r\n                                       if(td.checked){\r\n                                        let haha = [...listTodo]\r\n                                        \r\n                                        haha.splice(index, 1)\r\n\r\n                                        dispatch(updateListTodo({\r\n                                            listTodo:[...haha]\r\n                                        }))\r\n                                       }\r\n                                    }}>\r\n                                        <DeleteIcon color={!td.checked && \"disabled\" || \"error\"}  />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n\r\n\r\n                            </Paper>)\r\n                        } else {\r\n                            return (\r\n                                <Paper variant=\"outlined\" square sx={{ p: '2px 4px', margin: 'auto', marginTop: '10px', display: 'flex', alignItems: 'center', width: \"83%\" }}\r\n                                >\r\n\r\n                                    <TextField\r\n\r\n                                        value={editTodo}\r\n                                        sx={{ ml: 1, flex: 1 }}\r\n                                        autoFocus={td.edit}\r\n                                        onChange={\r\n                                            (e) => {\r\n\r\n                                               setEditTodo(e.target.value)\r\n\r\n                                            }\r\n                                        }\r\n\r\n                                        inputProps={{ 'aria-label': 'search google maps' }}\r\n                                        variant=\"standard\"\r\n\r\n                                    />\r\n\r\n                                    <Tooltip title=\"Lưu\">\r\n                                        <IconButton\r\n                                            onClick={() => {\r\n                                                let hh = [...listTodo]\r\n                                                hh[index] = {\r\n                                                    ...hh[index],\r\n                                                    edit:false,\r\n                                                    Todo: editTodo\r\n                                                };\r\n                                               \r\n                                                dispatch(updateListTodo({\r\n                                                    listTodo:[...hh]\r\n                                                }))\r\n                                            }}>\r\n                                            <CheckIcon />\r\n                                        </IconButton>\r\n\r\n                                    </Tooltip>\r\n                                    <Tooltip title=\"Hủy\">\r\n\r\n                                        <IconButton onClick={() => {\r\n\r\n                                            let haha = [...listTodo]\r\n                                            haha[index] ={\r\n                                                ...haha[index],\r\n                                                Todo:preTodo.Todo,\r\n                                                edit:false\r\n                                            }\r\n                                           \r\n\r\n                                            dispatch(updateListTodo({\r\n                                                listTodo:[...haha]\r\n                                            }))\r\n                                        }}>\r\n                                            <CancelIcon />\r\n                                        </IconButton>\r\n\r\n                                    </Tooltip>\r\n\r\n                                </Paper>)\r\n                        }\r\n                    })\r\n                }\r\n                <div style={{ marginTop: \"20px\",marginRight:\"8%\", display:\"flex\", justifyContent:\"right\" }}>\r\n\r\n                 <Tooltip title=\"Xóa các lựa chọn\">\r\n                       \r\n                           <Typography style={{cursor:\"pointer\",fontWeight:\"600\"}} onClick={()=>{\r\n                           \r\n                           let hh = [...listTodo];\r\n                           for(let i = 0;i<hh.length;i++){\r\n                               if(hh[i].checked){\r\n                                   hh.splice(i,1) \r\n                                   i--;                                 \r\n                               }\r\n                           }\r\n                           dispatch(updateListTodo({\r\n                               listTodo:[...hh]\r\n                           }))\r\n                        }} color={!deleteAllChecked&& \"gray\" || \"error\"}>Xóa các lựa chọn</Typography>\r\n                       \r\n                   </Tooltip>\r\n                   \r\n\r\n                </div>\r\n                <div style={{ marginTop: \"5px\",marginRight:\"8%\", display:\"flex\", justifyContent:\"right\" }}>\r\n\r\n<Tooltip title=\"Lưu các thay đổi\">\r\n      \r\n          <Typography style={{cursor:\"pointer\",fontWeight:\"600\"}} onClick={ async()=>{\r\n               let newUserx = {\r\n                ...userData\r\n            }\r\n            console.log(newUserx)\r\n            newUserx.todo = [...listTodo]\r\n\r\n            await updateUser(newUserx)\r\n            setShowAlert(true)\r\n            \r\n       }} color=\"primary\">Lưu lại các thay đổi</Typography>\r\n      \r\n  </Tooltip>\r\n\r\n  <Snackbar  open={showAlert} onClose={()=>{\r\n      setShowAlert(false)\r\n  }} autoHideDuration={1500}>\r\n  <Alert color=\"primary\" onClose={()=>{\r\n      setShowAlert(false)\r\n  }}\r\n  severity=\"success\" sx={{ width: '100%' , maxWidth:\"280px\",margin:\"auto\",marginTop:\"0px\" }} >Lưu các thay đổi thành công</Alert>\r\n      </Snackbar>\r\n  \r\n\r\n</div>\r\n                <div style={{ marginTop: \"20px\" }}>\r\n                    \r\n                    \r\n                    <Tooltip title=\"Đăng xuất\">\r\n                        <IconButton onClick={async () => {\r\n                          \r\n                            localStorage.removeItem('login')\r\n                            dispatch(logout())\r\n                            navigate('/')\r\n                           \r\n                        }}>\r\n                            <LogoutIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    \r\n\r\n                    \r\n                </div>\r\n            </div>\r\n           \r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n"],"names":["Alert","React","props","ref","elevation","variant","Todo","dispatch","useDispatch","useState","loading","setLoading","navigate","useNavigate","showAlert","setShowAlert","inputTodo","setInputTodo","edit","checked","preTodo","setPreTodo","editTodo","setEditTodo","deleteAllChecked","setdeleteAllChecked","listTodo","useSelector","selectTodoList","user","selectUser","userData","state","checkLogin","setChecklogin","useEffect","setTimeout","localStorage","getItem","removeItem","i","length","label","inputProps","Loading","className","Typography","sx","m","textAlign","paddingLeft","paddingBottom","gutterBottom","component","width","Paper","square","p","margin","display","alignItems","TextField","value","onChange","e","target","id","InputProps","startAdornment","InputAdornment","position","Tooltip","title","IconButton","onClick","updateListTodo","Check","map","td","index","marginTop","ml","flex","autoFocus","hh","haha","Cancel","Checkbox","console","log","b","InputBase","Edit","splice","Delete","color","style","marginRight","justifyContent","cursor","fontWeight","newUserx","todo","updateUser","Snackbar","open","onClose","autoHideDuration","severity","maxWidth","logout","Logout"],"sourceRoot":""}